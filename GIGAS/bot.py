import os
import time
import logging
import sqlite3
import random
import datetime
from threading import Thread
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from telegram.ext import (
    Updater, CommandHandler, CallbackContext, CallbackQueryHandler,
    MessageHandler, Filters, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ['TELEGRAM_TOKEN']

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
MAIN_MENU, HELP_MENU, EMERGENCY_HELP = range(3)

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
QUOTES = [
    "–°–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å —Å–µ–≥–æ–¥–Ω—è - —ç—Ç–æ —Å–∏–ª–∞ –∑–∞–≤—Ç—Ä–∞.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–±–µ–¥–∞ –Ω–∞–¥ —Å–æ–±–æ–π.",
    "–°–ª–æ–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è - –ª–µ–≥—á–µ –∑–∞–≤—Ç—Ä–∞.",
    "–¢–≤–æ—è —Å–∏–ª–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è.",
    "–ü—Ä–µ–æ–¥–æ–ª–µ–π —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∏ —Å—Ç–∞–Ω—å —Å–∏–ª—å–Ω–µ–µ –∑–∞–≤—Ç—Ä–∞.",
    "–ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏–ª–∞ - —É–º–µ—Ç—å —Å–∫–∞–∑–∞—Ç—å '–Ω–µ—Ç' —Å–≤–æ–∏–º —Å–ª–∞–±–æ—Å—Ç—è–º.",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
    "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
    "–¢–≤–æ—è –∂–∏–∑–Ω—å –º–µ–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –º–µ–Ω—è–µ—à—å—Å—è —Ç—ã —Å–∞–º.",
    "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - —ç—Ç–æ –º–æ—Å—Ç –º–µ–∂–¥—É —Ü–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏."
]

# –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TASKS = [
    "–°–¥–µ–ª–∞–π 20 –æ—Ç–∂–∏–º–∞–Ω–∏–π, –∫–æ–≥–¥–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –∏—Å–∫—É—à–µ–Ω–∏–µ.",
    "–í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ —Å–¥–µ–ª–∞–π 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.",
    "–í—ã–π–¥–∏ –Ω–∞ 10-–º–∏–Ω—É—Ç–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ.",
    "–ü—Ä–∏–º–∏—Ç–µ —Ö–æ–ª–æ–¥–Ω—ã–π –¥—É—à.",
    "–ü–æ—á–∏—Ç–∞–π –∫–Ω–∏–≥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.",
    "–ü–æ–∑–≤–æ–Ω–∏ –¥—Ä—É–≥—É –∏–ª–∏ —á–ª–µ–Ω—É —Å–µ–º—å–∏.",
    "–ú–µ–¥–∏—Ç–∏—Ä—É–π –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.",
    "–ó–∞–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫.",
    "–°–¥–µ–ª–∞–π —Ä–∞—Å—Ç—è–∂–∫—É –∏–ª–∏ –π–æ–≥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
    "–ù–∞—Ä–∏—Å—É–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö –Ω–∞ –±—É–¥—É—â–µ–µ."
]

# –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
EMERGENCY_TIPS = [
    "–°–¥–µ–ª–∞–π 20 –æ—Ç–∂–∏–º–∞–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
    "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–π–¥–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø—Ä–æ–π–¥–∏—Å—å.",
    "–í–∫–ª—é—á–∏ —Ö–æ–ª–æ–¥–Ω—ã–π –¥—É—à –∏ –ø–æ—Å—Ç–æ–π –ø–æ–¥ –Ω–∏–º 30 —Å–µ–∫—É–Ω–¥.",
    "–ü–æ–∑–≤–æ–Ω–∏ –¥—Ä—É–≥—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
    "–°–¥–µ–ª–∞–π 50 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ.",
    "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏: –≤–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 4.",
    "–í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã.",
    "–°–¥–µ–ª–∞–π –ø–ª–∞–Ω–∫—É –Ω–∞ 1 –º–∏–Ω—É—Ç—É.",
    "–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ —Å–æ—Å—á–∏—Ç–∞–π –¥–æ 100.",
    "–í–∫–ª—é—á–∏ –ª—é–±–∏–º—É—é —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é –º—É–∑—ã–∫—É –∏ –ø–æ–¥–≤–∏–≥–∞–π—Å—è –ø–æ–¥ –Ω–µ—ë."
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        start_date TEXT,
        last_check_in TEXT,
        streak INTEGER DEFAULT 0,
        longest_streak INTEGER DEFAULT 0,
        reminder_enabled INTEGER DEFAULT 1,
        reminder_time TEXT DEFAULT "20:00"
    )
    ''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS achievements (
        user_id INTEGER,
        achievement TEXT,
        achieved_date TEXT,
        PRIMARY KEY (user_id, achievement)
    )
    ''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —á–∞—Ç–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS chat_messages (
        message_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        message TEXT,
        timestamp TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username):
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result is None:
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        cursor.execute(
            "INSERT INTO users (user_id, username, start_date, last_check_in, streak) VALUES (?, ?, ?, ?, ?)",
            (user_id, username, today, today, 0)
        )
        conn.commit()
        conn.close()
        return True
    
    conn.close()
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
def check_achievements(user_id, streak):
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    achievements = []
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    
    if streak >= 3:
        cursor.execute(
            "INSERT OR IGNORE INTO achievements (user_id, achievement, achieved_date) VALUES (?, ?, ?)",
            (user_id, "3_days", today)
        )
        if cursor.rowcount > 0:
            achievements.append("ü•â 3 –¥–Ω—è –±–µ–∑ —Å—Ä—ã–≤–æ–≤!")
    
    if streak >= 7:
        cursor.execute(
            "INSERT OR IGNORE INTO achievements (user_id, achievement, achieved_date) VALUES (?, ?, ?)",
            (user_id, "7_days", today)
        )
        if cursor.rowcount > 0:
            achievements.append("ü•à 7 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤!")
    
    if streak >= 14:
        cursor.execute(
            "INSERT OR IGNORE INTO achievements (user_id, achievement, achieved_date) VALUES (?, ?, ?)",
            (user_id, "14_days", today)
        )
        if cursor.rowcount > 0:
            achievements.append("ü•á 14 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤!")
    
    if streak >= 28:
        cursor.execute(
            "INSERT OR IGNORE INTO achievements (user_id, achievement, achieved_date) VALUES (?, ?, ?)",
            (user_id, "28_days", today)
        )
        if cursor.rowcount > 0:
            achievements.append("üèÜ 28 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤! –¢—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!")
    
    conn.commit()
    conn.close()
    
    return achievements

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders(context: CallbackContext):
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    current_time = datetime.datetime.now().strftime("%H:%M")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    cursor.execute(
        "SELECT user_id FROM users WHERE reminder_enabled = 1 AND reminder_time = ?",
        (current_time,)
    )
    
    users = cursor.fetchall()
    conn.close()
    
    for user in users:
        try:
            quote = random.choice(QUOTES)
            message = f"üìù *–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n_{quote}_\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è! /checkin"
            
            context.bot.send_message(
                chat_id=user[0],
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_new = register_user(user.id, user.username or user.first_name)
    
    if is_new:
        message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ "
            f"—Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è.\n\n"
            f"üî∞ *–ß—Ç–æ —è —É–º–µ—é:*\n"
            f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            f"üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞\n"
            f"üñº –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            f"üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –≤ –º–æ–º–µ–Ω—Ç—ã —Å–ª–∞–±–æ—Å—Ç–∏\n"
            f"üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
    else:
        message = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ."
        )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="checkin"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton("üìù –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è", callback_data="task"),
            InlineKeyboardButton("üñº –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivation")
        ],
        [
            InlineKeyboardButton("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", callback_data="emergency"),
            InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return MAIN_MENU

# –ö–æ–º–∞–Ω–¥–∞ /help
def help_command(update: Update, context: CallbackContext) -> int:
    help_text = (
        "*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/task - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è\n"
        "/motivation - –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É\n"
        "/emergency - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ –∏—Å–∫—É—à–µ–Ω–∏–∏\n"
        "/achievements - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "/reminder - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/chat - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return HELP_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    if query.data == "back_to_menu":
        return show_main_menu(update, context)
    elif query.data == "checkin":
        return checkin(update, context)
    elif query.data == "stats":
        return show_stats(update, context)
    elif query.data == "task":
        return daily_task(update, context)
    elif query.data == "motivation":
        return motivation(update, context)
    elif query.data == "emergency":
        return emergency(update, context)
    elif query.data == "achievements":
        return show_achievements(update, context)
    elif query.data.startswith("emergency_tip_"):
        return send_emergency_tip(update, context)
    elif query.data == "back_to_emergency":
        return emergency(update, context)
    
    return MAIN_MENU

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="checkin"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton("üìù –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è", callback_data="task"),
            InlineKeyboardButton("üñº –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivation")
        ],
        [
            InlineKeyboardButton("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", callback_data="emergency"),
            InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

# –û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –¥–Ω—è
def checkin(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–º–µ—á–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è
    cursor.execute(
        "SELECT last_check_in, streak FROM users WHERE user_id = ?",
        (user_id,)
    )
    result = cursor.fetchone()
    
    if result:
        last_check_in, streak = result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ—á–∞–ª—Å—è –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        if last_check_in == today:
            if isinstance(update.callback_query, type(None)):
                update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            else:
                update.callback_query.edit_message_text("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        else:
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –¥–Ω–µ–π
            last_date = datetime.datetime.strptime(last_check_in, "%Y-%m-%d")
            current_date = datetime.datetime.strptime(today, "%Y-%m-%d")
            days_diff = (current_date - last_date).days
            
            if days_diff == 1:
                # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak
                new_streak = streak + 1
                message = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Å–µ—Ä–∏—è –±–µ–∑ —Å—Ä—ã–≤–æ–≤: {new_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!"
            elif days_diff > 1:
                # –ü—Ä–æ–ø—É—â–µ–Ω—ã –¥–Ω–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º streak
                new_streak = 1
                message = "‚úÖ –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Å–µ—Ä–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π. –ù–æ–≤–∞—è —Å–µ—Ä–∏—è: 1 –¥–µ–Ω—å."
            else:
                # –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –¥–∞—Ç–∞–º–∏
                new_streak = streak
                message = "‚úÖ –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞."
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "UPDATE users SET last_check_in = ?, streak = ?, longest_streak = MAX(longest_streak, ?) WHERE user_id = ?",
                (today, new_streak, new_streak, user_id)
            )
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            achievements = check_achievements(user_id, new_streak)
            
            if achievements:
                message += "\n\nüèÜ *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n" + "\n".join(achievements)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 28 –¥–Ω–µ–π
                if new_streak >= 28:
                    message += "\n\nüéÅ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º 28 –¥–Ω–µ–π!*\n–í–∞—à –ø–æ–¥–∞—Ä–æ–∫: [–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç](https://–≤–∞—à—Å—Å—ã–ª–∫–∞.ru)"
            
            if isinstance(update.callback_query, type(None)):
                update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            else:
                update.callback_query.edit_message_text(text=message, parse_mode=ParseMode.MARKDOWN)
    
    conn.close()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END
    if isinstance(update.callback_query, type(None)):
        return ConversationHandler.END
    
    return MAIN_MENU

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
def show_stats(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT start_date, streak, longest_streak FROM users WHERE user_id = ?",
        (user_id,)
    )
    result = cursor.fetchone()
    
    if result:
        start_date, streak, longest_streak = result
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞
        start = datetime.datetime.strptime(start_date, "%Y-%m-%d")
        today = datetime.datetime.now()
        total_days = (today - start).days + 1
        
        stats_text = (
            f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
            f"üìà –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n"
            f"üèÜ –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: {longest_streak} –¥–Ω–µ–π\n"
            f"‚è± –í—Å–µ–≥–æ –¥–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏: {total_days}"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if isinstance(update.callback_query, type(None)):
            update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            update.callback_query.edit_message_text(text=stats_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    conn.close()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END
    if isinstance(update.callback_query, type(None)):
        return ConversationHandler.END
    
    return MAIN_MENU

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
def daily_task(update: Update, context: CallbackContext) -> int:
    task = random.choice(TASKS)
    
    task_text = f"üìù *–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è:*\n\n{task}\n\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –≤–∞—à–µ–π —Ü–µ–ª–∏!"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if isinstance(update.callback_query, type(None)):
        update.message.reply_text(task_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        update.callback_query.edit_message_text(text=task_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END
    if isinstance(update.callback_query, type(None)):
        return ConversationHandler.END
    
    return MAIN_MENU

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
def motivation(update: Update, context: CallbackContext) -> int:
    quote = random.choice(QUOTES)
    
    motivation_text = f"üñº *–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:*\n\n_{quote}_"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if isinstance(update.callback_query, type(None)):
        update.message.reply_text(motivation_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        update.callback_query.edit_message_text(text=motivation_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END
    if isinstance(update.callback_query, type(None)):
        return ConversationHandler.END
    
    return MAIN_MENU

# –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
def emergency(update: Update, context: CallbackContext) -> int:
    emergency_text = (
        "üÜò *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å*\n\n"
        "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –∏—Å–∫—É—à–µ–Ω–∏–µ? –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–æ—â–∏ –Ω–∏–∂–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí™ –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="emergency_tip_physical")],
        [InlineKeyboardButton("üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", callback_data="emergency_tip_mental")],
        [InlineKeyboardButton("üöø –•–æ–ª–æ–¥–Ω—ã–π –¥—É—à", callback_data="emergency_tip_shower")],
        [InlineKeyboardButton("üîÑ –û—Ç–≤–ª–µ—á–µ–Ω–∏–µ", callback_data="emergency_tip_distraction")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if isinstance(update.callback_query, type(None)):
        update.message.reply_text(emergency_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        update.callback_query.edit_message_text(text=emergency_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º EMERGENCY_HELP
    if isinstance(update.callback_query, type(None)):
        return EMERGENCY_HELP
    
    return EMERGENCY_HELP

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏
def send_emergency_tip(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    tip_type = query.data.replace("emergency_tip_", "")
    
    tips = {
        "physical": [
            "–°–¥–µ–ª–∞–π—Ç–µ 20 –æ—Ç–∂–∏–º–∞–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 30 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π.",
            "–°–¥–µ–ª–∞–π—Ç–µ –ø–ª–∞–Ω–∫—É –Ω–∞ 1 –º–∏–Ω—É—Ç—É."
        ],
        "mental": [
            "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏: –≤–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 4.",
            "–ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ —Å–æ—Å—á–∏—Ç–∞–π—Ç–µ –¥–æ 100.",
            "–ú–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, —Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏."
        ],
        "shower": [
            "–ü—Ä–∏–º–∏—Ç–µ —Ö–æ–ª–æ–¥–Ω—ã–π –¥—É—à –Ω–∞ 30-60 —Å–µ–∫—É–Ω–¥.",
            "–£–º–æ–π—Ç–µ—Å—å —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.",
            "–ü–æ–¥–µ—Ä–∂–∏—Ç–µ —Ä—É–∫–∏ –ø–æ–¥ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã."
        ],
        "distraction": [
            "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –¥—Ä—É–≥—É –∏–ª–∏ —á–ª–µ–Ω—É —Å–µ–º—å–∏.",
            "–í—ã–π–¥–∏—Ç–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–æ–≥—É–ª–∫—É.",
            "–í–∫–ª—é—á–∏—Ç–µ –ª—é–±–∏–º—É—é —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é –º—É–∑—ã–∫—É –∏ –ø–æ–¥–≤–∏–≥–∞–π—Ç–µ—Å—å –ø–æ–¥ –Ω–µ—ë."
        ]
    }
    
    if tip_type in tips:
        tip = random.choice(tips[tip_type])
        emergency_text = f"üÜò *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:*\n\n{tip}\n\n–í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å! –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å–∏–ª—å–Ω—ã–º–∏!"
    else:
        tip = random.choice(EMERGENCY_TIPS)
        emergency_text = f"üÜò *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:*\n\n{tip}\n\n–í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å! –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å–∏–ª—å–Ω—ã–º–∏!"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="back_to_emergency")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=emergency_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return EMERGENCY_HELP

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
def show_achievements(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT achievement, achieved_date FROM achievements WHERE user_id = ? ORDER BY achieved_date",
        (user_id,)
    )
    achievements = cursor.fetchall()
    
    achievement_descriptions = {
        "3_days": "ü•â 3 –¥–Ω—è –±–µ–∑ —Å—Ä—ã–≤–æ–≤",
        "7_days": "ü•à 7 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤",
        "14_days": "ü•á 14 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤",
        "28_days": "üèÜ 28 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤"
    }
    
    if achievements:
        text = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
        
        for achievement, date in achievements:
            desc = achievement_descriptions.get(achievement, achievement)
            text += f"{desc} - –ø–æ–ª—É—á–µ–Ω–æ {date}\n"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        text += "\n*–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n"
        earned = [a[0] for a in achievements]
        
        for ach, desc in achievement_descriptions.items():
            if ach not in earned:
                text += f"‚òê {desc}\n"
    else:
        text = (
            "üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è!\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n"
            "‚òê ü•â 3 –¥–Ω—è –±–µ–∑ —Å—Ä—ã–≤–æ–≤\n"
            "‚òê ü•à 7 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤\n"
            "‚òê ü•á 14 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤\n"
            "‚òê üèÜ 28 –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤"
        )
    
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if isinstance(update.callback_query, type(None)):
        update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END
    if isinstance(update.callback_query, type(None)):
        return ConversationHandler.END
    
    return MAIN_MENU

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def reminder_settings(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT reminder_enabled, reminder_time FROM users WHERE user_id = ?",
        (user_id,)
    )
    result = cursor.fetchone()
    
    if result:
        enabled, time = result
        
        text = (
            f"‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω—ã' if enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"–í—Ä–µ–º—è: {time}\n\n"
            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/reminder_on - –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            f"/reminder_off - –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            f"/set_time –ß–ß:–ú–ú - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set_time 20:00)"
        )
        
        update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    conn.close()
    return ConversationHandler.END

# –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def reminder_on(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE users SET reminder_enabled = 1 WHERE user_id = ?",
        (user_id,)
    )
    conn.commit()
    
    cursor.execute(
        "SELECT reminder_time FROM users WHERE user_id = ?",
        (user_id,)
    )
    time = cursor.fetchone()[0]
    
    conn.close()
    
    update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time}.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    return ConversationHandler.END

# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def reminder_off(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE users SET reminder_enabled = 0 WHERE user_id = ?",
        (user_id,)
    )
    conn.commit()
    conn.close()
    
    update.message.reply_text(
        "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    return ConversationHandler.END

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def set_reminder_time(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if not context.args or len(context.args) != 1:
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_time 20:00",
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END
    
    time_str = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        hours, minutes = map(int, time_str.split(':'))
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError
    except ValueError:
        update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20:00",
            parse_mode=ParseMode.MARKDOWN
        )
        return ConversationHandler.END
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    formatted_time = f"{hours:02d}:{minutes:02d}"
    
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE users SET reminder_time = ? WHERE user_id = ?",
        (formatted_time, user_id)
    )
    conn.commit()
    conn.close()
    
    update.message.reply_text(
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {formatted_time}.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç–∞
def start_chat(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    
    text = (
        "üí¨ *–ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞.\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit_chat"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    context.user_data['in_chat'] = True
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ —á–∞—Ç–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    broadcast_message(context, f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!", user_id)
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
def exit_chat(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    if 'in_chat' in context.user_data:
        del context.user_data['in_chat']
    
    update.message.reply_text(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤ —á–∞—Ç–µ –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    broadcast_message(context, f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", user_id)
    
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
def handle_chat_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if not context.user_data.get('in_chat', False):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute(
        "INSERT INTO chat_messages (user_id, username, message, timestamp) VALUES (?, ?, ?, ?)",
        (user_id, username, message_text, timestamp)
    )
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —á–∞—Ç–µ
    formatted_message = f"üí¨ {username}: {message_text}"
    broadcast_message(context, formatted_message, user_id)
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —á–∞—Ç–µ
def broadcast_message(context, message, sender_id=None):
    conn = sqlite3.connect('nofap_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    for user in users:
        user_id = user[0]
        if user_id != sender_id:
            try:
                context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def check_reminders(context: CallbackContext):
    try:
        send_reminders(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã Replit
def keep_alive():
    while True:
        time.sleep(60)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Updater
    updater = Updater(TOKEN)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('help', help_command),
            CommandHandler('checkin', checkin),
            CommandHandler('stats', show_stats),
            CommandHandler('task', daily_task),
            CommandHandler('motivation', motivation),
            CommandHandler('emergency', emergency),
            CommandHandler('achievements', show_achievements),
            CommandHandler('reminder', reminder_settings),
            CommandHandler('reminder_on', reminder_on),
            CommandHandler('reminder_off', reminder_off),
            CommandHandler('set_time', set_reminder_time),
            CommandHandler('chat', start_chat),
            CommandHandler('exit_chat', exit_chat)
        ],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(button_handler)
            ],
            HELP_MENU: [
                CallbackQueryHandler(button_handler)
            ],
            EMERGENCY_HELP: [
                CallbackQueryHandler(button_handler)
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    dispatcher.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_chat_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Job –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue = updater.job_queue
    job_queue.run_repeating(check_reminders, interval=60, first=0)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è keep_alive
    Thread(target=keep_alive).start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()